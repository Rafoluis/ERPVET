generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  idUsuario     Int       @id @default(autoincrement())
  nombre        String
  apellido      String
  dni           String    @unique
  sexo          Sexo
  email         String?   @unique
  telefono      String    @default("")
  direccion     String?
  fechaCreacion DateTime  @default(now())
  password      String
  deletedAt     DateTime?

  empleado Empleado?
  roles    UsuarioRol[]
}

model Rol {
  idRol     Int          @id @default(autoincrement())
  nombre    TipoRol      @unique
  deletedAt DateTime?
  usuarios  UsuarioRol[]
}

model UsuarioRol {
  idUsuarioRol    Int       @id @default(autoincrement())
  idUsuario       Int
  idRol           Int
  fechaAsignacion DateTime  @default(now())
  deletedAt       DateTime?

  usuario Usuario @relation(fields: [idUsuario], references: [idUsuario])
  rol     Rol     @relation(fields: [idRol], references: [idRol])

  @@unique([idUsuario, idRol])
}

model Empleado {
  idEmpleado    Int       @id @default(autoincrement())
  idUsuario     Int       @unique
  especialidad  String
  fechaCreacion DateTime  @default(now())
  deletedAt     DateTime?

  usuario Usuario @relation(fields: [idUsuario], references: [idUsuario])
}

model Propietario {
  idPropietario Int       @id @default(autoincrement())
  dni           Int
  nombre        String
  apellido      String
  correo        String    @unique
  telefono      String
  direccion     String?
  fechaCreacion DateTime  @default(now())
  deletedAt     DateTime?
  mascotas      Mascota[]
}

model Mascota {
  idMascota           Int        @id @default(autoincrement())
  idPropietario       Int
  nombre              String
  especie             String
  raza                String?
  sexo                SexoMascot
  fechaNacimiento     DateTime
  peso                Float?
  numeroChip          String?    @unique
  esterilizado        Boolean    @default(false)
  alergias            String?
  notasComportamiento String?
  fechaCreacion       DateTime   @default(now())
  urlfoto             String?
  deletedAt           DateTime?

  propietario         Propietario          @relation(fields: [idPropietario], references: [idPropietario])
  historialesClinicos HistoriaClinica[]
  registrosVacunas    RegistroVacunacion[]
}

model HistoriaClinica {
  idHistoriaClinica    Int    @id @default(autoincrement())
  idMascota            Int    @unique
  tamaño              String
  color                String
  señalesParticulares String
  finZootecnico        String
  origenProcedencia    String

  enfermedadPrevia String
  alimentacion     String
  habitad          String
  viajesRecientes  String
  convivencia      String
  comportamiento   String
  partos           Int
  viveConAnimales  Boolean
  fechaCreacion    DateTime  @default(now())
  deletedAt        DateTime?

  previasEnfermedades   EnfermedadPrevia[]
  previasCirugias       CirugiaPrevia[]
  tratamientosRecientes TratamientoReciente[]

  adjunto     AdjuntoHistoria[]
  lineaTiempo LineaTiempo[]
  mascota     Mascota           @relation(fields: [idMascota], references: [idMascota])
}

model EnfermedadPrevia {
  id                Int             @id @default(autoincrement())
  idHistoriaClinica Int
  descripcion       String
  fecha             DateTime?
  historia          HistoriaClinica @relation(fields: [idHistoriaClinica], references: [idHistoriaClinica])
}

model CirugiaPrevia {
  id                Int             @id @default(autoincrement())
  idHistoriaClinica Int
  descripcion       String
  fecha             DateTime?
  historia          HistoriaClinica @relation(fields: [idHistoriaClinica], references: [idHistoriaClinica])
}

model TratamientoReciente {
  id                Int             @id @default(autoincrement())
  idHistoriaClinica Int
  descripcion       String
  fechaInicio       DateTime?
  fechaFin          DateTime?
  historia          HistoriaClinica @relation(fields: [idHistoriaClinica], references: [idHistoriaClinica])
}

model AdjuntoHistoria {
  idAdjuntosHistoria Int       @id @default(autoincrement())
  idHistoriaClinica  Int
  url                String
  descripcion        String?
  fechaCreacion      DateTime  @default(now())
  deletedAt          DateTime?

  historia HistoriaClinica @relation(fields: [idHistoriaClinica], references: [idHistoriaClinica])
}

model RegistroVacunacion {
  idRegistroVacuna    Int       @id @default(autoincrement())
  idMascota           Int
  nombreVacuna        String
  fechaAdministracion DateTime  @default(now())
  fechaProxima        DateTime?
  lote                String?
  veterinario         String?
  fechaCreacion       DateTime  @default(now())
  deletedAt           DateTime?

  mascota Mascota @relation(fields: [idMascota], references: [idMascota])
}

model LineaTiempo {
  id                Int       @id @default(autoincrement())
  idHistoriaClinica Int
  tipo              EventType
  titulo            String
  ubicacion         String
  descripcion       String
  detalles          String[]  @default([])
  fechaCreacion     DateTime  @default(now())
  deletedAt         DateTime?

  historia HistoriaClinica @relation(fields: [idHistoriaClinica], references: [idHistoriaClinica])
}

enum Sexo {
  MASCULINO
  FEMENINO
}

enum SexoMascot {
  MACHO
  HEMBRA
}

enum TipoRol {
  // ADMIN
  VETERINARIO
  // PACIENTE
  // RECEPCIONISTA
}

enum EventType {
  CIRUGIA_ESTERILIZACION
  CHEQUEO_SEGUIMIENTO
  CONSULTA_INICIAL
}
